import { pipe, timer, throwError, Observable } from 'rxjs';
import { catchError, map, retry, tap } from 'rxjs/operators';
import { AxiosError, AxiosResponse } from 'axios';
import { HttpException, HttpStatus } from '@nestjs/common';

// Interface pour typer les r√©ponses d'erreur du backend, si elles ont un champ 'message'
interface BackendErrorData {
  message?: string;
  // Ajoutez d'autres champs si votre backend renvoie des erreurs structur√©es
}

/**
 * Cr√©e un op√©rateur RxJS qui g√®re les retries avec backoff exponentiel et la gestion des erreurs HTTP.
 *
 * @param requestIdentifier Une cha√Æne pour identifier la requ√™te dans les logs (ex: URL de la requ√™te).
 * @param maxRetries Le nombre maximum de tentatives de retry apr√®s la requ√™te initiale.
 * @returns Une fonction d'op√©rateur RxJS √† utiliser dans un .pipe().
 */
export function httpRetryOperator<T>(requestIdentifier: string, maxRetries: number = 3) {
  // Cette fonction d'op√©rateur prend un Observable (ici, la r√©ponse d'Axios)
  // et retourne un Observable transform√©.
  return function (source: Observable<AxiosResponse<T>>): Observable<T> {
    return source.pipe(
      // --- LOG POUR LA TENTATIVE INITIALE ---
      // Utilise tap pour logguer sans modifier le flux de donn√©es
      tap(() => console.log(`‚û°Ô∏è Attempting HTTP request to ${requestIdentifier} (initial attempt)...`)),
      
      // Mappe la r√©ponse Axios pour extraire uniquement la propri√©t√© 'data' en cas de succ√®s.
      // C'est crucial car 'httpService' renvoie un Observable de 'AxiosResponse',
      // mais votre service veut retourner juste les donn√©es.
      map(response => response.data),

      // Configure l'op√©rateur 'retry' pour g√©rer les nouvelles tentatives en cas d'erreur.
      retry({
        count: maxRetries, // Nombre de tentatives de retry (apr√®s la premi√®re erreur)
        delay: (error: AxiosError, retryCount: number) => {
          // --- LOG POUR CHAQUE TENTATIVE DE RETRY ---
          console.warn(`‚ö†Ô∏è Retry attempt ${retryCount}/${maxRetries} for ${requestIdentifier}. Error: ${error.message}`);
          
          // Condition pour d√©cider si on doit retry ou arr√™ter imm√©diatement.
          // Ne pas retry sur les erreurs client (4xx), sauf 429 (Too Many Requests),
          // car ce sont g√©n√©ralement des erreurs de logique ou de donn√©es qui ne se r√©soudront pas avec un retry.
          if (error.response && error.response.status >= 400 && error.response.status < 500 && error.response.status !== HttpStatus.TOO_MANY_REQUESTS) {
            console.error(`üõë Not retrying for client error status ${error.response.status} for ${requestIdentifier}. Propagating error immediately.`);
            // throwError arr√™te le flux et propage l'erreur sans retry suppl√©mentaire.
            return throwError(() => error); 
          }

          // Calcul du d√©lai avec un backoff exponentiel: 2s, 4s, 8s, etc.
          // Le d√©lai est plafonn√© √† 60 secondes (60000 ms) pour √©viter des attentes trop longues.
          const delayTime = Math.min(60000, (2 ** retryCount) * 1000); 
          // --- LOG POUR LE D√âLAI D'ATTENTE ---
          console.log(`‚è≥ Waiting ${delayTime / 1000} seconds before next retry for ${requestIdentifier}...`);
          
          // 'timer' retourne un Observable qui √©met apr√®s le d√©lai sp√©cifi√©, d√©clenchant la prochaine tentative.
          return timer(delayTime); 
        },
      }),

      // 'catchError' est plac√© APR√àS 'retry' pour n'intercepter l'erreur UNIQUEMENT
      // si toutes les tentatives de retry ont √©chou√© ou si 'retry' a d√©cid√© d'arr√™ter.
      catchError((error: AxiosError) => {
        // --- LOG POUR L'ERREUR FINALE APR√àS √âCHEC DE TOUS LES RETRIES ---
        console.error(`‚ùå Final error after all ${maxRetries} retries failed for ${requestIdentifier}: ${error.message}`);
        
        if (error.response) {
          // Tente de r√©cup√©rer le message d'erreur original du backend si disponible,
          // en tenant compte de la structure de error.response.data.
          const backendMessage = (error.response.data as BackendErrorData)?.message || 'Service backend indisponible apr√®s tentatives.';

          // Si l'erreur provient d'une r√©ponse HTTP du service backend (ex: votre 503 simul√©e)
          throw new HttpException(
            {
              message: backendMessage,
              error: error.response.statusText,
              statusCode: error.response.status,
            },
            error.response.status, // Utilise le statut HTTP du backend
          );
        }
        // Si c'est une erreur r√©seau (pas de r√©ponse du serveur, timeout avant la r√©ponse, etc.)
        throw new HttpException(
          `Impossible de joindre le service HTTP (${requestIdentifier}) apr√®s plusieurs tentatives (probl√®me r√©seau ou service non d√©marr√©).`,
          HttpStatus.SERVICE_UNAVAILABLE, // Code d'erreur HTTP 503 Service Unavailable
        );
      }),
    );
  };
}
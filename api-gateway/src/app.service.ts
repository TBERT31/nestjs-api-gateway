import { HttpService } from '@nestjs/axios';
import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';
import { ClientProxy } from '@nestjs/microservices';
import { AxiosError } from 'axios';
import { firstValueFrom, throwError, timer } from 'rxjs';
import { catchError, map, repeat, retry, tap } from 'rxjs/operators';

@Injectable()
export class AppService {
  constructor(
    @Inject('SERVICE_A') private readonly clientServiceA: ClientProxy,
    @Inject('SERVICE_B') private readonly clientServiceB: ClientProxy,
    private readonly httpService: HttpService,
  ) {}

  pingServiceA() {
    const startTs = Date.now();
    const pattern = { cmd: 'ping' };
    const payload = {};
    return this.clientServiceA
      .send<string>(pattern, payload)
      .pipe(
        map((message: string) => ({ message, duration: Date.now() - startTs })),
      );
  }

  pingServiceB() {
    const startTs = Date.now();
    const pattern = { cmd: 'ping' };
    const payload = {};
    return this.clientServiceB
      .send<string>(pattern, payload)
      .pipe(
        map((message: string) => ({ message, duration: Date.now() - startTs })),
      );
  }

  // async pingHttpService() {
  //   const response = await firstValueFrom(
  //     this.httpService.get('http://localhost:7002/ping-http'),
  //   );
  //     return response.data;
  // }
  pingHttpService() {
    const maxRetries = 5; // D√©finir le nombre maximum de tentatives de retry APRES la premi√®re requ√™te

    return this.httpService.get('http://localhost:7002/ping-http').pipe(
      // --- LOG POUR LA TENTATIVE INITIALE ---
      // 'tap' permet de faire des effets de bord (comme logguer) sans modifier le flux
      tap(() => console.log('‚û°Ô∏è Attempting HTTP request to /ping-http (initial attempt)...')),
      
      // Mappe la r√©ponse pour n'extraire que les donn√©es en cas de succ√®s
      map(response => response.data),

      // Configure l'op√©rateur 'retry' pour g√©rer les nouvelles tentatives en cas d'erreur
      retry({
        count: maxRetries, // Nombre de tentatives de retry apr√®s la premi√®re erreur
        delay: (error: AxiosError, retryCount: number) => {
          // --- LOG POUR CHAQUE TENTATIVE DE RETRY ---
          console.warn(`‚ö†Ô∏è Retry attempt ${retryCount}/${maxRetries} for HTTP request. Error: ${error.message}`);
          
          // Condition pour d√©cider si on doit retry ou arr√™ter tout de suite
          // Ne pas retry sur les erreurs client (4xx), sauf 429 (Too Many Requests)
          if (error.response && error.response.status >= 400 && error.response.status < 500 && error.response.status !== 429) {
            console.error(`üõë Not retrying for client error status ${error.response.status}. Propagating error immediately.`);
            // throwError arr√™te le flux et propage l'erreur sans retry suppl√©mentaire
            return throwError(() => error); 
          }

          // Calcul du d√©lai avec un backoff exponentiel (2s, 4s, 8s, etc.)
          // Math.min(60000, ...) plafonne le d√©lai √† 60 secondes (60000 ms)
          const delayTime = Math.min(60000, (2 ** retryCount) * 1000); 
          // --- LOG POUR LE D√âLAI D'ATTENTE ---
          console.log(`‚è≥ Waiting ${delayTime / 1000} seconds before next retry...`);
          
          // 'timer' retourne un Observable qui √©met apr√®s le d√©lai sp√©cifi√©, d√©clenchant le retry
          return timer(delayTime); 
        },
      }),

      // 'catchError' est plac√© APR√àS 'retry' pour n'intercepter l'erreur
      // que si toutes les tentatives de retry ont √©chou√© ou si 'retry' a d√©cid√© d'arr√™ter.
      catchError((error: AxiosError) => {
        // --- LOG POUR L'ERREUR FINALE APR√àS √âCHEC DE TOUS LES RETRIES ---
        console.error(`‚ùå Final error after all ${maxRetries} retries failed or retry condition not met: ${error.message}`);
        
        if (error.response) {
          const backendMessage = error.response.data && typeof error.response.data === 'object' && 'message' in error.response.data
            ? error.response.data.message
            : 'Service backend indisponible apr√®s tentatives.';

          // Si l'erreur provient d'une r√©ponse HTTP du service backend (ex: votre 503)
          throw new HttpException(
            {
              // Tente de r√©cup√©rer le message d'erreur original du backend si disponible
              message: backendMessage,
              error: error.response.statusText,
              statusCode: error.response.status,
            },
            error.response.status, // Utilisez le statut HTTP du backend
          );
        }
        // Si c'est une erreur r√©seau (pas de r√©ponse du serveur, timeout avant la r√©ponse, etc.)
        throw new HttpException(
          'Impossible de joindre le service HTTP apr√®s plusieurs tentatives (probl√®me r√©seau ou service non d√©marr√©).',
          HttpStatus.SERVICE_UNAVAILABLE, // Code d'erreur HTTP 503
        );
      }),
    );
  }
}